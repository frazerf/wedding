{"mappings":"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","sources":["<anon>","js/main.js"],"sourcesContent":["// nav.js\n// Consolidate into one DOMContentLoaded event handler\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Get all relevant elements\n    const hamburger = document.querySelector('.hamburger-menu');\n    const navLinks = document.querySelector('.nav-links');\n    const navLinksAnchors = document.querySelectorAll('.nav-links a[href^=\"#\"]');\n    // Hamburger menu toggle\n    hamburger.addEventListener('click', function() {\n        this.classList.toggle('active');\n        navLinks.classList.toggle('active');\n    });\n    // Smooth scrolling for all anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach((anchor)=>{\n        anchor.addEventListener('click', function(e) {\n            e.preventDefault();\n            // Get the target section id from the href attribute\n            const targetId = this.getAttribute('href');\n            const targetSection = document.querySelector(targetId);\n            // Only scroll if target exists\n            if (targetSection) {\n                // Close mobile menu if open\n                if (hamburger.classList.contains('active')) {\n                    hamburger.classList.remove('active');\n                    navLinks.classList.remove('active');\n                }\n                // Get offset position and scroll\n                const offsetTop = targetSection.offsetTop;\n                window.scrollTo({\n                    top: offsetTop,\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n    // Sticky header logic\n    let lastScroll = 0;\n    window.addEventListener('scroll', function() {\n        const currentScroll = window.pageYOffset;\n        const header = document.querySelector('.site-header');\n        if (currentScroll > 50) header.classList.add('scrolled');\n        else header.classList.remove('scrolled');\n        lastScroll = currentScroll;\n    });\n});\n// Hero Carousel\n// animations.js - Hero image fading\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Only run if we have the hero section\n    const heroSection = document.querySelector(\".hero-section\");\n    if (!heroSection) return;\n    // Create the background elements\n    const heroBackground = document.querySelector(\".hero-background\");\n    const image1 = document.createElement(\"div\");\n    const image2 = document.createElement(\"div\");\n    image1.classList.add(\"hero-background\", \"image-1\");\n    image2.classList.add(\"hero-background\", \"image-2\");\n    heroSection.appendChild(image1);\n    heroSection.appendChild(image2);\n    // Set up the image rotation\n    let activeImage = 1;\n    function rotateBackgroundImages() {\n        if (activeImage === 1) {\n            image1.style.opacity = \"0\";\n            image2.style.opacity = \"1\";\n            activeImage = 2;\n        } else {\n            image1.style.opacity = \"1\";\n            image2.style.opacity = \"0\";\n            activeImage = 1;\n        }\n    }\n    // Change image every 7 seconds\n    setInterval(rotateBackgroundImages, 7000);\n});\n// JavaScript for countdown timer\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Get all countdown timers on the page\n    const countdownTimers = document.querySelectorAll(\".countdown-timer\");\n    // Function to create a countdown for a specific element and date\n    function createCountdown(element, targetDate) {\n        // Get the display elements within this countdown\n        const daysEl = element.querySelector(\".days\");\n        const hoursEl = element.querySelector(\".hours\");\n        const minutesEl = element.querySelector(\".minutes\");\n        const secondsEl = element.querySelector(\".seconds\");\n        // Don't proceed if elements aren't found\n        if (!daysEl || !hoursEl || !minutesEl || !secondsEl) {\n            console.error(\"Countdown elements not found\");\n            return;\n        }\n        // Update the countdown every second\n        return setInterval(function() {\n            // Get current date and time\n            const now = new Date().getTime();\n            // Find the distance between now and the target date\n            const distance = targetDate - now;\n            // If the countdown is over\n            if (distance < 0) {\n                clearInterval(countdown);\n                daysEl.innerHTML = \"00\";\n                hoursEl.innerHTML = \"00\";\n                minutesEl.innerHTML = \"00\";\n                secondsEl.innerHTML = \"00\";\n                // Add completed message if needed\n                const container = element.closest(\".countdown-container\");\n                if (container) {\n                    const messageEl = document.createElement(\"p\");\n                    messageEl.classList.add(\"countdown-complete-message\");\n                    messageEl.innerHTML = \"This event has begun!\";\n                    container.appendChild(messageEl);\n                }\n                return;\n            }\n            // Time calculations for days, hours, minutes and seconds\n            const days = Math.floor(distance / 86400000);\n            const hours = Math.floor(distance % 86400000 / 3600000);\n            const minutes = Math.floor(distance % 3600000 / 60000);\n            const seconds = Math.floor(distance % 60000 / 1000);\n            // Display the result with leading zeros\n            daysEl.innerHTML = days.toString().padStart(2, \"0\");\n            hoursEl.innerHTML = hours.toString().padStart(2, \"0\");\n            minutesEl.innerHTML = minutes.toString().padStart(2, \"0\");\n            secondsEl.innerHTML = seconds.toString().padStart(2, \"0\");\n        }, 1000);\n    }\n    // Setup each countdown timer with its specific date\n    countdownTimers.forEach((timer)=>{\n        // Get the target date from data attribute\n        const dateStr = timer.getAttribute(\"data-target-date\");\n        if (!dateStr) {\n            console.error(\"Missing data-target-date attribute\");\n            return;\n        }\n        const targetDate = new Date(dateStr);\n        createCountdown(timer, targetDate);\n    });\n});\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Get all tab headers\n    const tabHeaders = document.querySelectorAll(\".tab-header\");\n    const tabContents = document.querySelectorAll(\".tab-content\");\n    // Add click event to each tab header\n    tabHeaders.forEach((header)=>{\n        header.addEventListener(\"click\", function() {\n            // Remove active class from all headers and contents\n            tabHeaders.forEach((h)=>h.classList.remove(\"active\"));\n            tabContents.forEach((c)=>c.classList.remove(\"active\"));\n            // Add active class to current header\n            this.classList.add(\"active\");\n            // Get the associated tab content and activate it\n            const tabId = this.getAttribute(\"data-tab\");\n            document.getElementById(tabId).classList.add(\"active\");\n        });\n    });\n});\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Select all accordion items\n    const accordionItems = document.querySelectorAll('.accordion-item');\n    // Add click event listeners to each accordion header\n    accordionItems.forEach((item)=>{\n        const header = item.querySelector('.accordion-header');\n        header.addEventListener('click', function() {\n            // Toggle active class on the clicked item\n            item.classList.toggle('active');\n            // Toggle aria-expanded attribute for accessibility\n            const isExpanded = item.classList.contains('active');\n            header.setAttribute('aria-expanded', isExpanded);\n            // Optional: Close other open accordions (comment out for multiple open)\n            if (isExpanded) accordionItems.forEach((otherItem)=>{\n                if (otherItem !== item && otherItem.classList.contains('active')) {\n                    otherItem.classList.remove('active');\n                    otherItem.querySelector('.accordion-header').setAttribute('aria-expanded', false);\n                }\n            });\n        });\n    });\n});\n\n//# sourceMappingURL=index.8bdf5e2f.js.map\n","// nav.js\n// Consolidate into one DOMContentLoaded event handler\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Get all relevant elements\n  const hamburger = document.querySelector('.hamburger-menu');\n  const navLinks = document.querySelector('.nav-links');\n  const navLinksAnchors = document.querySelectorAll('.nav-links a[href^=\"#\"]');\n  \n  // Hamburger menu toggle\n  hamburger.addEventListener('click', function() {\n    this.classList.toggle('active');\n    navLinks.classList.toggle('active');\n  });\n  \n  // Smooth scrolling for all anchor links\n  document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function(e) {\n      e.preventDefault();\n      \n      // Get the target section id from the href attribute\n      const targetId = this.getAttribute('href');\n      const targetSection = document.querySelector(targetId);\n      \n      // Only scroll if target exists\n      if (targetSection) {\n        // Close mobile menu if open\n        if (hamburger.classList.contains('active')) {\n          hamburger.classList.remove('active');\n          navLinks.classList.remove('active');\n        }\n        \n        // Get offset position and scroll\n        const offsetTop = targetSection.offsetTop;\n        window.scrollTo({\n          top: offsetTop,\n          behavior: 'smooth'\n        });\n      }\n    });\n  });\n  \n  // Sticky header logic\n  let lastScroll = 0;\n  window.addEventListener('scroll', function() {\n    const currentScroll = window.pageYOffset;\n    const header = document.querySelector('.site-header');\n    \n    if (currentScroll > 50) {\n      header.classList.add('scrolled');\n    } else {\n      header.classList.remove('scrolled');\n    }\n    \n    lastScroll = currentScroll;\n  });\n});\n\n// Hero Carousel\n// animations.js - Hero image fading\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Only run if we have the hero section\n  const heroSection = document.querySelector(\".hero-section\");\n  if (!heroSection) return;\n\n  // Create the background elements\n  const heroBackground = document.querySelector(\".hero-background\");\n  const image1 = document.createElement(\"div\");\n  const image2 = document.createElement(\"div\");\n\n  image1.classList.add(\"hero-background\", \"image-1\");\n  image2.classList.add(\"hero-background\", \"image-2\");\n\n  heroSection.appendChild(image1);\n  heroSection.appendChild(image2);\n\n  // Set up the image rotation\n  let activeImage = 1;\n\n  function rotateBackgroundImages() {\n    if (activeImage === 1) {\n      image1.style.opacity = \"0\";\n      image2.style.opacity = \"1\";\n      activeImage = 2;\n    } else {\n      image1.style.opacity = \"1\";\n      image2.style.opacity = \"0\";\n      activeImage = 1;\n    }\n  }\n\n  // Change image every 7 seconds\n  setInterval(rotateBackgroundImages, 7000);\n});\n\n// JavaScript for countdown timer\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Get all countdown timers on the page\n  const countdownTimers = document.querySelectorAll(\".countdown-timer\");\n\n  // Function to create a countdown for a specific element and date\n  function createCountdown(element, targetDate) {\n    // Get the display elements within this countdown\n    const daysEl = element.querySelector(\".days\");\n    const hoursEl = element.querySelector(\".hours\");\n    const minutesEl = element.querySelector(\".minutes\");\n    const secondsEl = element.querySelector(\".seconds\");\n\n    // Don't proceed if elements aren't found\n    if (!daysEl || !hoursEl || !minutesEl || !secondsEl) {\n      console.error(\"Countdown elements not found\");\n      return;\n    }\n\n    // Update the countdown every second\n    return setInterval(function () {\n      // Get current date and time\n      const now = new Date().getTime();\n\n      // Find the distance between now and the target date\n      const distance = targetDate - now;\n\n      // If the countdown is over\n      if (distance < 0) {\n        clearInterval(countdown);\n        daysEl.innerHTML = \"00\";\n        hoursEl.innerHTML = \"00\";\n        minutesEl.innerHTML = \"00\";\n        secondsEl.innerHTML = \"00\";\n\n        // Add completed message if needed\n        const container = element.closest(\".countdown-container\");\n        if (container) {\n          const messageEl = document.createElement(\"p\");\n          messageEl.classList.add(\"countdown-complete-message\");\n          messageEl.innerHTML = \"This event has begun!\";\n          container.appendChild(messageEl);\n        }\n\n        return;\n      }\n\n      // Time calculations for days, hours, minutes and seconds\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      // Display the result with leading zeros\n      daysEl.innerHTML = days.toString().padStart(2, \"0\");\n      hoursEl.innerHTML = hours.toString().padStart(2, \"0\");\n      minutesEl.innerHTML = minutes.toString().padStart(2, \"0\");\n      secondsEl.innerHTML = seconds.toString().padStart(2, \"0\");\n    }, 1000);\n  }\n\n  // Setup each countdown timer with its specific date\n  countdownTimers.forEach((timer) => {\n    // Get the target date from data attribute\n    const dateStr = timer.getAttribute(\"data-target-date\");\n    if (!dateStr) {\n      console.error(\"Missing data-target-date attribute\");\n      return;\n    }\n\n    const targetDate = new Date(dateStr);\n    createCountdown(timer, targetDate);\n  });\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Get all tab headers\n  const tabHeaders = document.querySelectorAll(\".tab-header\");\n  const tabContents = document.querySelectorAll(\".tab-content\");\n\n  // Add click event to each tab header\n  tabHeaders.forEach((header) => {\n    header.addEventListener(\"click\", function () {\n      // Remove active class from all headers and contents\n      tabHeaders.forEach((h) => h.classList.remove(\"active\"));\n      tabContents.forEach((c) => c.classList.remove(\"active\"));\n\n      // Add active class to current header\n      this.classList.add(\"active\");\n\n      // Get the associated tab content and activate it\n      const tabId = this.getAttribute(\"data-tab\");\n      document.getElementById(tabId).classList.add(\"active\");\n    });\n  });\n});\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Select all accordion items\n  const accordionItems = document.querySelectorAll('.accordion-item');\n  \n  // Add click event listeners to each accordion header\n  accordionItems.forEach(item => {\n    const header = item.querySelector('.accordion-header');\n    \n    header.addEventListener('click', function() {\n      // Toggle active class on the clicked item\n      item.classList.toggle('active');\n      \n      // Toggle aria-expanded attribute for accessibility\n      const isExpanded = item.classList.contains('active');\n      header.setAttribute('aria-expanded', isExpanded);\n      \n      // Optional: Close other open accordions (comment out for multiple open)\n      if (isExpanded) {\n        accordionItems.forEach(otherItem => {\n          if (otherItem !== item && otherItem.classList.contains('active')) {\n            otherItem.classList.remove('active');\n            otherItem.querySelector('.accordion-header').setAttribute('aria-expanded', false);\n          }\n        });\n      }\n    });\n  });\n});"],"names":["document","addEventListener","hamburger","querySelector","navLinks","querySelectorAll","classList","toggle","forEach","anchor","e","preventDefault","targetId","getAttribute","targetSection","contains","remove","offsetTop","window","scrollTo","top","behavior","currentScroll","pageYOffset","header","add","heroSection","image1","createElement","image2","appendChild","activeImage","setInterval","style","opacity","countdownTimers","timer","dateStr","console","error","createCountdown","element","targetDate","daysEl","hoursEl","minutesEl","secondsEl","distance","Date","getTime","clearInterval","countdown","innerHTML","container","closest","messageEl","days","Math","floor","hours","minutes","seconds","toString","padStart","tabHeaders","tabContents","h","c","tabId","getElementById","accordionItems","item","isExpanded","setAttribute","otherItem"],"version":3,"file":"index.8bdf5e2f.js.map"}